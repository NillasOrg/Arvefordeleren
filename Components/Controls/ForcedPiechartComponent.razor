@inject HeirsRepository HeirsRepository

<div class="graph-div">
    <div class="title">
        <div class="title-left">
            <h4>Tvangsarv</h4>
        </div>
        <div class="title-right">
            <div class="tooltip">
                Hjælp
                <span class="tooltiptext">Dette er resultatet er deres friarv. Her kan de se fordelingen baseret på dine indtastninger. De kan frit gå tilbage og ændre for at se en anderledes konstellation.</span>
            </div>
        </div>
    </div>


    <div class="graph-body">
        <div class="graph-left">
            <MudChart ChartType="ChartType.Pie" InputData="@ForcedHeirsValues.ToArray()" InputLabels="@ForcedHeirsLabels.ToArray()"
                      Width="100%"
            >
            </MudChart>
        </div>

        <div class="graph-right">
            <div class="graph-grid">
                @foreach (var heir in ForcedHeirsList)
                {
                <div>
                    <label>@heir.Name:</label>
                    <MudNumericField T="double"
                                     Value="@heir.Share"
                                     MinValue="0"
                                     MaxValue="@GetMaxAllowedShare(heir)"
                                     ValueChanged="@(newShare => OnShareChange(heir, newShare))"
                                     Immediate="true"
                                     Adornment="Adornment.End"
                                     AdornmentText="%"
                                     HideSpinButtons="true" disabled/>
                </div>
                }
            </div>
        </div>
    </div>
</div>
@code {

    [Parameter]
    public List<PieChartSeriesProps> ForcedInheritanceInput { get; set; }
    private double TotalShare => HeirsRepository.ForcedHeirs.Sum(h => h.Share);

    private List<PieChartSeriesProps> ForcedInheritanceSeries => HeirsRepository.ForcedHeirs
        .Select(h => new PieChartSeriesProps { Name = h.Name, Value = h.Share })
        .ToList();

    private void OnShareChange(Person heir, double newShare)
    {
        HeirsRepository.UpdateHeirShare(heir, newShare);
        StateHasChanged(); // Opdater UI
    }

    private void ValidateAndSetShare(Heir heir)
    {
        double totalWithoutCurrent = HeirsRepository.ForcedHeirs
            .Where(h => h.Id != heir.Id)
            .Sum(h => h.Share);

        if (TotalShare > 100)
        {
            heir.Share = Math.Max(0, 100 - totalWithoutCurrent);
            Console.WriteLine($"Værdi korrigeret på tab: {heir.Share}%.");
        }

        UpdateForcedHeirs(); // Sikrer repository-konsistens
        StateHasChanged(); // Opdater UI
    }

    private double GetMaxAllowedShare(Person heir)
    {
        double totalWithoutCurrent = HeirsRepository.ForcedHeirs
            .Where(h => h.Id != heir.Id)
            .Sum(h => h.Share);

        return Math.Max(0, 100 - totalWithoutCurrent);
    }

    private void UpdateForcedHeirs()
    {
        if (TotalShare > 100)
        {
            double excess = TotalShare - 100;
            foreach (var heir in HeirsRepository.ForcedHeirs.OrderByDescending(h => h.Share))
            {
                if (excess <= 0) break;

                double reduction = Math.Min(excess, heir.Share);
                heir.Share -= reduction;
                excess -= reduction;
            }
        }
    }
    public class PieChartSeriesProps
    {
        public string Name { get; set; }
        public double Value { get; set; }

    }

    private List<Person> ForcedHeirsList => Models.Shared.SharedData.ForcedHeirs;

    private List<double> ForcedHeirsValues => ForcedHeirsList.Select(person => person.Share).ToList();
    private List<string> ForcedHeirsLabels => ForcedHeirsList.Select(person => person.Name).ToList();
}

