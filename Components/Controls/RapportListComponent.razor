<div class="RapportList-container">
    <div class="tab-header">
        <button class="tab-button @(showAsset ? "active" : "")" @onclick="ShowAsset">Aktiver</button>
        <button class="tab-button @(!showAsset ? "active" : "")" @onclick="ShowHeir">Arvinger</button>
    </div>

    @if (showAsset)
    {
        <div class="content">
            @foreach (Asset asset in assetList)
            {
                <div class="item @(asset == selectedItem ? "highlighted" : "")" @onclick="() => SelectItem(asset)">

                    <div class="icon">
                        <img class="icon" src="@asset.Icon" />
                    </div>
                    <div class="details">
                        <strong>@asset.Type</strong>
                        <p>@asset.Note</p>
                    </div>

                </div>
            }
        </div>
    }
    else if (!showAsset)
    {
        <div class="content">
            @foreach (Heir heir in heirList)
            {
                <div class="item @(heir == selectedItem ? "highlighted" : "")" @onclick="() => SelectItem(heir) ">
                    
                    <div class="icon">
                        <img class="icon" src="@heir.Icon" />
                    </div>
                    <div class="details">
                        <strong>@heir.Name</strong>
                        <p>@heir.RelationType</p>
                    </div>
                </div>
            }
        </div>

@*         <!-- Kasse for tvangsarvinger -->
        <div class="content-container">
            <h3>Tvangsarvinger</h3>
            <div class="content">
                @foreach (Person person in forcedHeirsList)
                {
                    <div class="item @(person == selectedItem ? "highlighted" : "")" @onclick="() => SelectItem(person)">
                        <div class="icon">
                            <img class="icon" src="@person.Icon" />
                        </div>
                        <div class="details">
                            <strong>@person.Name</strong>
                            <p>@person.Relation</p>
                        </div>
                    </div>
                }
            </div>
        </div> *@
    }
</div>

@code {

    [Parameter]
    public Asset? Asset { get; set; }

    private object? selectedItem;

    private bool showAsset = true;

    private List<Asset> assetList;
    private List<Heir> heirList;
    private List<Person> forcedHeirsList => Models.Shared.SharedData.ForcedHeirs;

    protected override async Task OnInitializedAsync()
    {
        showAsset = true;

        assetList = AssetsRepository.Assets;

        foreach (var heir in HeirsRepository.Heirs)
        {
            if (heir is Heir heirAsHeir)
            {
                HeirsRepository.AddHeirToFamilyList(heirAsHeir);
                HeirsRepository.UpdateHeirRelation(heirAsHeir);
                HeirsRepository.OnForcedHeirsUpdated += UpdateHeirList;

            }
        }

        var testator = TestatorRepository.GetTestatorById(2);
        if (testator != null)
        {
            TestatorRepository.AddTestatorToForcedHeirs(testator);
        }

        //ExecuteDistributionLogic();

        HeirsRepository.UpdateShares();

        StateHasChanged();
    }

    private void UpdateHeirList()
    {
        heirList = HeirsRepository.Heirs;
        StateHasChanged();
    }

    // private void ExecuteDistributionLogic()
    // {
        
    //     var spouse = forcedHeirsList.FirstOrDefault(h => h.Address != null);

    //     if (spouse != null)
    //     {
    //         var children = forcedHeirsList.Where(h => h.Relation == RelationType.Barn).ToList();
    //         //HeirsRepository.DistributeSharesWithSpouseAndChildren();
    //     }
    // }

    private void ShowAsset()
    {
        if(!showAsset)
        {
            showAsset = true;

            assetList = AssetsRepository.Assets;
        }
    }

    private void ShowHeir()
    {
        if(showAsset)
        {
            showAsset = false;

            heirList = HeirsRepository.Heirs;
        }
    }

    private void SelectItem(Object item)
    {
        selectedItem = item;
    }
}
